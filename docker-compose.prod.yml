version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    env_file: .env.prod
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings
      - DEBUG=False
    command: gunicorn --bind 0.0.0.0:8000 --workers 4 --worker-class gthread --threads 2 core.wsgi:application
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - db
    networks:
      - backend

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    env_file: .env.prod
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings
      - DEBUG=False
    command: celery -A core worker -l info --concurrency=4
    depends_on:
      - redis
      - db
    networks:
      - backend

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    env_file: .env.prod
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings
      - DEBUG=False
    command: celery -A core beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    depends_on:
      - redis
      - db
    networks:
      - backend

  flower:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    env_file: .env.prod
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings
      - DEBUG=False
    command: celery -A core flower --port=5555
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - backend

  db:
    image: postgres:13-alpine
    restart: always
    env_file: .env.prod
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - backend

  redis:
    image: redis:7-alpine
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD:-your-redis-password}
    volumes:
      - redis_data:/data
    networks:
      - backend

  nginx:
    image: nginx:1.21-alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./staticfiles:/app/staticfiles
      - ./media:/app/media
      - ./certs:/etc/letsencrypt
    depends_on:
      - web
    networks:
      - frontend
      - backend

volumes:
  postgres_data:
  redis_data:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
